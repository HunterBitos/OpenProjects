###################################################################
##
## Name     : axi_hostinterface
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_hostinterface

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:USER
OPTION DESC = AXI_HOSTINTERFACE
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog

PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x0, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI

##PARAMETER C_USE_WSTRB = 0, DT = INTEGER
##PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER
PARAMETER C_FAMILY = virtex6, DT = STRING
##PARAMETER C_NUM_REG = 1, DT = INTEGER
##PARAMETER C_NUM_MEM = 1, DT = INTEGER
##PARAMETER C_SLV_AWIDTH = 32, DT = INTEGER
##PARAMETER C_SLV_DWIDTH = 32, DT = INTEGER


### Parallel Interface Generic
PARAMETER gVersionMajor = 0xFF, DT = INTEGER, RANGE = (0:65535), ASSIGNMENT = CONSTANT
PARAMETER gVersionMinor = 0xFF, DT = INTEGER, RANGE = (0:65535), ASSIGNMENT = CONSTANT
PARAMETER gVersionRevision = 0xFF, DT = INTEGER, RANGE = (0:65535), ASSIGNMENT = CONSTANT
PARAMETER gVersionCount = 0x0, DT = INTEGER, RANGE = (0:65535), ASSIGNMENT = CONSTANT
PARAMETER gHostIfType = 1, DT = INTEGER, TYPE = NON_HDL, RANGE = (0:1), VALUES = (0 = "Internal AXI Bus", 1 = "Parallel Interface" )
PARAMETER gParallelDataWidth = 16, DT = INTEGER, TYPE = NON_HDL, RANGE = (16,32), ISVALID = (gHostIfType == 1)
PARAMETER gParallelMultiplex = 0, DT = INTEGER, TYPE = NON_HDL, RANGE = (0:1), VALUES = (0 = "Demultiplexed", 1 = "Multiplexed), ISVALID = (gHostIfType == 1)
PARAMETER gBaseDynBuf0  = 0x800, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseDynBuf1  = 0x01000, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseErrCntr = 0x01800, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseTxNmtQ = 0x02800, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseTxGenQ = 0x03800, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseTxSynQ = 0x04800, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseTxVetQ = 0x05800, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseRxVetQ = 0x06800, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseK2UQ = 0x07000, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseU2KQ = 0x09000, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseTpdo = 0x0B000, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseRpdo = 0x0E000, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)
PARAMETER gBaseRes = 0x14000, DT = std_logic_vector, TYPE = NON_HDL, ISVALID = (gHostIfType == 1)


## AXI Lite PCP Slave Ports 
PORT PCP_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT PCP_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_PCP_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_PCP_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_PCP_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

PORT S_PCP_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_PCP_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_PCP_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_PCP_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI

PORT S_PCP_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_PCP_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_PCP_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI

PORT S_PCP_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_PCP_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_PCP_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_PCP_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_PCP_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_PCP_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_PCP_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI

PORT S_PCP_AXI_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI
PORT S_PCP_AXI_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI

## Master Bridge Avalon Ports //TODO: Replace with AXI lite Master codes
PORT avm_hostBridge_address = "", DIR = O, VEC =[29:0]
PORT avm_hostBridge_byteenable = "", DIR = O, VEC =[3:0]
PORT avm_hostBridge_read = "", DIR = O
PORT avm_hostBridge_readdata= "", DIR = I, VEC =[31:0]
PORT avm_hostBridge_write = "", DIR = O
PORT avm_hostBridge_writedata = "", DIR = O, VEC =[31:0] 
PORT avm_hostBridge_waitrequest = "", DIR = O
## Parallel Interface Ports to External World
PORT coe_ExtSync_exsync = "", DIR = I
PORT coe_NodeId_nodeid = "", DIR = I, VEC =[7:0]
PORT coe_PlkLed_lederr = "", DIR = O
PORT coe_PlkLed_ledst = "", DIR = O
PORT coe_parHost_chipselect = "", DIR = I
PORT coe_parHost_read = "", DIR = I
PORT coe_parHost_write = "", DIR = I
PORT coe_parHost_addressLatchEnable = "", DIR = I
PORT coe_parHost_acknowledge = "", DIR = O
PORT coe_parHost_byteenable = = "", DIR = I, VEC =[gParallelDataWidth/8-1:0]
PORT coe_parHost_address = "", DIR = I, VEC =[15:0]  
PORT coe_parHost_data = "", DIR = INOUT, VEC =[gParallelDataWidth-1:0]
PORT coe_parHost_addressData  = "", DIR = INOUT, VEC =[gParallelDataWidth-1:0]


## Interrupt Signals
PORT inr_irqSync_irq = "", DIR = I, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT ins_irqOut_irq  = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH

END
