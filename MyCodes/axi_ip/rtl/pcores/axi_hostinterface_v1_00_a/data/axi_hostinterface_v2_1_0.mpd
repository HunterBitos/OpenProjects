###################################################################
##
## Name     : axi_hostinterface
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_hostinterface

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:USER
OPTION DESC = AXI_HOSTINTERFACE
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)


## Bus Interfaces
BUS_INTERFACE BUS = PCP_SLAVE_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = HOST_SLAVE_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (gHostIfType == 0)
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER

##IO Interface
IO_INTERFACE IO_IF = PAP, IO_TYPE = XIL_GPIO_V1
IO_INTERFACE IO_IF = LED, IO_TYPE = XIL_GPIO_V1

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector (31 downto 0), MIN_SIZE = 0x10000 , PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = PCP_SLAVE_AXI, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector (31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = PCP_SLAVE_AXI, ASSIGNMENT = REQUIRE, TYPE = NON_HDL
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = PCP_SLAVE_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = PCP_SLAVE_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = PCP_SLAVE_AXI
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = PCP_SLAVE_AXI

## AP Generic
PARAMETER C_HOST_BASEADDR  = 0xffffffff, DT = std_logic_vector(31 downto 0), MIN_SIZE = 0x10000 , PAIR = C_HOST_HIGHADDR, ADDRESS = BASE, BUS = HOST_SLAVE_AXI, ASSIGNMENT = REQUIRE, ISVALID = (gHostIfType == 0)
PARAMETER C_HOST_HIGHADDR  = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_HOST_BASEADDR, ADDRESS = HIGH, BUS = HOST_SLAVE_AXI, ASSIGNMENT = REQUIRE, ISVALID = (gHostIfType == 0)
PARAMETER C_S_HOST_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = HOST_SLAVE_AXI, ASSIGNMENT = CONSTANT, ISVALID = (gHostIfType == 0)
PARAMETER C_S_HOST_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = HOST_SLAVE_AXI, ASSIGNMENT = CONSTANT, ISVALID = (gHostIfType == 0)
## Master
PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT 
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT

### Parallel Interface Generic
PARAMETER gVersionMajor = 0xFF, DT = INTEGER, RANGE = (0:65535), ASSIGNMENT = CONSTANT
PARAMETER gVersionMinor = 0xFF, DT = INTEGER, RANGE = (0:65535), ASSIGNMENT = CONSTANT
PARAMETER gVersionRevision = 0xFF, DT = INTEGER, RANGE = (0:65535), ASSIGNMENT = CONSTANT
PARAMETER gVersionCount = 0x0, DT = INTEGER, RANGE = (0:65535), ASSIGNMENT = CONSTANT
PARAMETER gHostIfType = 1, DT = INTEGER, TYPE = NON_HDL, RANGE = (0:1), VALUES = (0 = "Internal AXI Bus", 1 = "Parallel Interface" )
PARAMETER gParallelDataWidth = 16, DT = INTEGER, RANGE = (16,32), ISVALID = (gHostIfType == 1)
PARAMETER gParallelMultiplex = 0, DT = INTEGER, TYPE = NON_HDL, RANGE = (0:1), VALUES = (0 = "Demultiplexed", 1 = "Multiplexed"), ISVALID = (gHostIfType == 1),

PARAMETER gBaseDynBuf0  = 0x800, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseDynBuf1  = 0x01000, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseErrCntr = 0x01800, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseTxNmtQ = 0x02800, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseTxGenQ = 0x03800, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseTxSynQ = 0x04800, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseTxVetQ = 0x05800, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseRxVetQ = 0x06800, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseK2UQ = 0x07000, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseU2KQ = 0x09000, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseTpdo = 0x0B000, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseRpdo = 0x0E000, DT = std_logic_vector, TYPE = NON_HDL
PARAMETER gBaseRes = 0x14000, DT = std_logic_vector, TYPE = NON_HDL


## AXI Lite PCP Slave Ports 
PORT PCP_ACLK = "", DIR = I, SIGIS = CLK, BUS = PCP_SLAVE_AXI
PORT PCP_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_AWVALID = AWVALID, DIR = I, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_AWREADY = AWREADY, DIR = O, BUS = PCP_SLAVE_AXI

PORT S_PCP_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_WVALID = WVALID, DIR = I, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_WREADY = WREADY, DIR = O, BUS = PCP_SLAVE_AXI

PORT S_PCP_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_BVALID = BVALID, DIR = O, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_BREADY = BREADY, DIR = I, BUS = PCP_SLAVE_AXI

PORT S_PCP_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_ARVALID = ARVALID, DIR = I, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_ARREADY = ARREADY, DIR = O, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_RVALID = RVALID, DIR = O, BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_RREADY = RREADY, DIR = I, BUS = PCP_SLAVE_AXI

PORT S_PCP_AXI_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = PCP_SLAVE_AXI
PORT S_PCP_AXI_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = PCP_SLAVE_AXI

## AXI Lite AP Slave Ports 
PORT HOST_ACLK = "", DIR = I, SIGIS = CLK, BUS = HOST_SLAVE_AXI
PORT HOST_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_HOST_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_AWVALID = AWVALID, DIR = I, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_AWREADY = AWREADY, DIR = O, BUS = HOST_SLAVE_AXI

PORT S_HOST_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_HOST_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_HOST_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_WVALID = WVALID, DIR = I, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_WREADY = WREADY, DIR = O, BUS = HOST_SLAVE_AXI

PORT S_HOST_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_BVALID = BVALID, DIR = O, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_BREADY = BREADY, DIR = I, BUS = HOST_SLAVE_AXI

PORT S_HOST_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_HOST_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_ARVALID = ARVALID, DIR = I, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_ARREADY = ARREADY, DIR = O, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_HOST_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_RVALID = RVALID, DIR = O, BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_RREADY = RREADY, DIR = I, BUS = HOST_SLAVE_AXI

PORT S_HOST_AXI_AWPROT = AWPROT, DIR = I, VEC = [2:0], BUS = HOST_SLAVE_AXI
PORT S_HOST_AXI_ARPROT = ARPROT, DIR = I, VEC = [2:0], BUS = HOST_SLAVE_AXI


## Master Bridge Interface
PORT M_AXI_ACLK  = "",DIR = I, SIGIS = CLK, BUS = M_AXI
PORT M_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI

PORT M_AXI_AWADDR = AWADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_AWPROT = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT M_AXI_AWVALID = AWVALID, DIR = O, BUS = M_AXI
PORT M_AXI_AWREADY = AWREADY, DIR = I, BUS = M_AXI

PORT M_AXI_WDATA = WDATA, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_WSTRB = WSTRB, DIR = O, VEC = [((C_M_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT M_AXI_WVALID = WVALID, DIR = O, BUS = M_AXI
PORT M_AXI_WREADY  = WREADY, DIR = I, BUS = M_AXI     

PORT M_AXI_BRESP  = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI       
PORT M_AXI_BVALID = BVALID, DIR = I, BUS = M_AXI
PORT M_AXI_BREADY = BREADY, DIR = O, BUS = M_AXI

PORT M_AXI_ARADDR = ARADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI      
PORT M_AXI_ARPROT = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT M_AXI_ARVALID = ARVALID, DIR = O, BUS = M_AXI 
PORT M_AXI_ARREADY = ARREADY, DIR = I, BUS = M_AXI
PORT M_AXI_RDATA  = RDATA, DIR = I, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI  
PORT M_AXI_RRESP  = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI 
PORT M_AXI_RVALID = RVALID, DIR = I, BUS = M_AXI 
PORT M_AXI_RREADY = RREADY, DIR = O, BUS = M_AXI

## Parallel Interface Ports to External World
PORT coe_ExtSync_exsync = "", DIR = I, IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_chipselect = "", DIR = I, IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_read = "", DIR = I, IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_write = "", DIR = I, IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_addressLatchEnable = "", DIR = I, IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_acknowledge = "", DIR = O, IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_byteenable = = "", DIR = I, VEC =[(gParallelDataWidth/8)-1:0], IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_address = "", DIR = I, VEC =[15:0], IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_data = "", DIR = INOUT, VEC =[gParallelDataWidth-1:0], IO_IF = PAP, ISVALID = (gHostIfType == 1)
PORT coe_parHost_addressData  = "", DIR = INOUT, VEC =[gParallelDataWidth-1:0], IO_IF = PAP, ISVALID = (gHostIfType == 1)
##Other External Pins
PORT coe_NodeId_nodeid = "", DIR = I, VEC =[7:0], IO_IF = LED
PORT coe_PlkLed_lederr = "", DIR = O, IO_IF = LED
PORT coe_PlkLed_ledst = "", DIR = O, IO_IF = LED

## Interrupt Signals
PORT inr_irqSync_irq = "", DIR = I, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH
PORT ins_irqOut_irq  = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH

END
